puts '                                 Docker Volumes (Монтирование общей папки)'

# По умолчанию, когда мы запускаем контейнер и делаем в нем какие-то настройки, добавляем данные в БД итд, а потом удаляем контейнер, то наши данные нигде не сохраняются, это неудобно, если мы например хотим использовать те же данные на других версиях каких-то технологий, для которых нужны новые образы и соответсвенно новые контейнеры

# Можно смонтировать общие папки для хост машины и контейнера - тоесть вне контейнера на сервере/хосте будем хранить данные измененные в контейнере.

# Docker Volumes / Докер Тома – механизм для хранения данных, который позволяет сохранять данные контейнеров вне их файловой системы для сохранения состояния приложений и данных между перезапусками контейнеров. Сохраняет настройки на сервере(хост машине). За счет томов можно хранить значения в БД, файлы, документы итд.

# Docker Volumes делятся на: Host Volumes, Anonymous Volumes, Named Volumes

# На Докерхабе в инфе про образ указаны маршруты по которвм в контейнере находятся директории-Volumes (?? или это просто дирекории с данной технологией внутри кастриранного линукса контейнера ??)

# -v    - флаг команды run чтобы соединить папку на нашем коипьютере(хост машина) с папкой в контейнере.

# Можно смонтировать много Volumes для одного контейнера просто продублировав флаг -v для каждого



puts '                                             Host Volumes'

# Host Volumes - это смонтированные общие директории, для которых нужно указать путь на хост машине, по которому будут храниться данные (путь должен вести к уже существующей директории) и путь в контейнере к директории данные из которой будут храниться. Пути нужно указывать абсолютными, они записываются через двоеточие, первым путь к папке на нашем ПК и вторым путь к папке в контейнере

# Этот способ удобен тем, что можно заранее поместить в директорию на хост машине что угодно, например сделать доступной контейнеру наше давно написанное приложение

# $ docker run -v /user/some/app/resourses:/usr/src/app/resourses openjdk    - создаем контейнер с общей папкой resourses, которая находится на хост машине по пути /user/some/app/resourses а в контейнере по пути /usr/src/app/resourses
# $ docker run -v /opt/mysql_data:/var/lib/mysql mysql                       - не обязательно называть одинаково общую папку



puts '                                           Anonymous Volumes'

# Anonymous Volumes - это смонтированные общие директории, но без указания пути на хост-машине, создадутся по пути заданному докером: /var/lib/docker/volumes/HASH-код/_data. Минус этого варианта в том что мы точно не знаем где лежат данные разных контейнеров, тк именуются общие папки по хэш коду, а не названию

# ?? удалаются при остановке контейнера, тогда в чем их смысл ??

# $ docker run -v /usr/src/app/resourses openjdk            - создаем контейнер с общей папкой resourses
# $ docker run -v /var/lib/mysql mysql



puts '                                             Named Volumes'

# Named Volumes - это смонтированные общие директории, ля которых нужно указать абсолютный путь к папке в контейнере, а для хост машины только название папки без пути, тк он создастся докером: /var/lib/docker/volumes/имя_указанной_нами_папки/_data.

# $ docker run --name MyJava -v web:/usr/src/app/resourses openjdk      - создаем контейнер с подключенным томом "web" к папке контейнера "/usr/src/app/resourses"

# Можно использовать один и тот же volume в нескольких контейнерах:
# $ docker run -v my_volume:/data my_image_1
# $ docker run -v my_volume:/data my_image_2



puts '                                              Доп опции'

# Доп опции пишутся через двоеточие к маршруту общей папки в контейнере

# :ro  - (рид онли) контейнер не имеет права изменять что-то в директории вольюма на хост машине, а может только читать
# $ docker run -v /some/content:/usr/share/nginx/html:ro nginx    - контейнер не может изменить Host Volume /some/content



puts '                                               Команды'

# Чтобы увидеть, какие контейнеры используют определенный volume, можно использовать команду "docker ps" и "docker inspect" на конкретных контейнерах

# $ docker volume ls                - посмотреть какие тома у нас доступны

# $ docker volume inspect some      - информация о конкретном Volume с названием some

# $ docker volume create web        - создать Named Volume с именем "web"

# $ docker volume prune             - удаление неиспользуемых Volume

# $ docker volume rm some                     - удаление конкретного Volume с названием some
# $ docker volume rm $(docker volume ls -a)   - удаление ?сех? Volume














#
