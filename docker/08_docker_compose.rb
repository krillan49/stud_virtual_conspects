puts '                                            Docker Compose'

# Docker Compose - это надстройка над Докером, если нам нужно запустить множество приложений, позволяет поместить в отдельный фаил все, что мы прописываем отдельными командами, настройки, образы, порты и потом просто запустить его одной командой

# Docker Compose позволяет подключить к проету сразу множество образов, указывать связь между ними и добавлять к ним характеристики и настройки. Например, можно подключить языки Джава, Python, C++, PHP и к ним дополнительно настроить сервера, среды разработки и все это в одном файле.

# docker-compose.yml - файл, в котором можно указать описание образов которые будут подключены, какие у них будут характеристики, возможности итд. При запуске проэкта эти образы будут либо скачаны либо сразу запущены.

# В Докер Хабе на странице образа внизу есть описание для фаила docker-compose.yml его содержание можно просто скопировать в свой фаил docker-compose.yml. Так же там ниже есть список всех переменных которые можно дописать дополнительно(например изменение логина, хоста итд)

# При построении файла Compose нужно указать сервисы(выполняют роль образов) и их характеристики.

# docker-compose.yml   - пример фаила docker-compose.yml с кодом, где описано 2 сервиса: 1й с образом с СУБД mariadb:10.3 и 2й с образом графического интерфейса phpmyadmin



puts '                                       Сборка и использование образа'

# > docker-compose build       - сборка проекта из всех сервисов описанных в фаиле docker-compose.yml

# docker-compose up - команда запуск собранного проекта, тоесть запуск всех сервисов(созднных для них контейнеров) из фаила docker-compose.yml, а так же предварительное скачивание и установка тех образов которых нет в наличии. Далее можем выполнить "docker ps" и посмотреть какие контейнеры были созданы и запустились.
# > docker-compose up          - запуск всех сервисов в обычном режиме (Ctrl + C выход из режима работы приложения в консоли)
# $ docker-compose up -d       - запуск все сервисов в фоновом режиме

# > docker-compose down        - остановить все контейнеры запущенные сервисами (останавливаем наш проект)



puts '                                   Модификация и добавление нового сервиса'

# (Тут изменения будут docker-compose(mod).yml льносительно старого docker-compose.yml)

# 1. Модифицируем сервис:
# Можно в этом сервисе поменять образ mariadb:10.3 на образ mysql вместо копирования из хаба кода для mysql (тк там вместо phpmyadmin указан другой графический интерфейс) для этого просто заменим имя образа в разделе image: в docker-compose
# Можно поменять и другие данные, например пароль на MYSQL_ROOT_PASSWORD: 12345
# Но стоит обратить внимание на наличие в коде хаба команд "comand"(аналог CMD из докерфаила) и добавить ее(тк она исполняется при каждом запуске):
# command: --default-authentication-plugin=mysql_native_password   (тут это плагин для авторизации)


# 2. Добавление нового сервиса:
# Можно написать код для него так же как и для двух сервисов выше, а можно использовать отдельный Dockerfile (?? перенести интеграцию докерфаила в другой подраздел ??) тут наш докерфаил с php


# 3. Собираем и запускаем:
# > docker-compose build
# > docker-compose up
# Заходим на наш локалхост уже в 2х вкладках в разных портах для разных сервисов и получаем новый вариант сборки



puts '                                        Описание томов в docker-compose'

# Можно указать в docker-compose файле и настройки томов, тоесть какие данные и где будут сохраняться. Тоесть указать папку в проекте и папку на хост-машине.


# Создание контейнера Питон + Джанга с сохранением настроек в томах докер:

# 0. requirements.txt  - стандартный фаил содержащий библиотеки(зависимости) для проэктов Джанга. Записываем в этот фаил:
# Django>=3.0,<4.0                                        - библиотека Джанга выше версии 3.0 и ниже версии 4.0
# psycopg2-binary>=2.8                                    - дополнительная библиотека для работы с Джанга и Питоном

# 1. Dockerfile(Python+Django) (код там):
# COPY requirements.txt ./               - помещаем фаил requirements.txt в ./ рабочую директорию, тк мы ее уже установили в WORKDIR, иначе нужно былоб прописать полный путь /usr/src/app
# RUN pip install -r requirements.txt    - берем библиотеки из фаила requirements.txt и устанавливаем их (pip бандлер Питона)

# 2 docker-compose.yml  - код описан в files/docker-compose(volumes).yml

# 3. Запускаем:
# docker-compose run  - команда строит контейнер(docker-compose build), запускает все сервисы(как docker-compose up) и принимает дополнительные подкоманды к функционалу контейнера (? по пути рабочей директории ?), с помощью нее можно обращаться к функционалу контейнера, например выполнять миграции, запускать сервер итд, тоесть все что мы вводим в командную строку к проекту идет через (следует за) "docker-compose run"
# (??? docker compose up -d    новая актуальная версия этой команды ???)
# > docker-compose run django django-admin startproject itproger .
# django django-admin startproject itproger .   - Создание нового проекта Джанго в текущн директоии. django - обращаемся к уже собранному фрэймворку Джанго, а через него к команде Джанго django-admin, а через нее к команде Джанго startproject которая создает новый Джанго-проект так же указываем название проекта(тут itproger), далее путь (.  - путь, тк тут генерировать Джанго-проект будем в той же папке)
# В итоге создаются фаилы manage.py и папка проекта(тут itproger) с фаилами для работы с Джанга
# > docker-compose up     - все равно необходимо чтобы запустить контейнеры на постоянную обработку(тоесть например запустить сервер)

# 4. Заходим на указанный нами localhost:8000 и получаем стандартную стартовую страницу Джанга
# если не работает смотрим в файл settigs.py строку ALLOWED_HOSTS = [] (тут должно быть [] или ['*'] это значит, что разрешенные хосты стоят в значении "все")
# localhost:8000/admin - панель администратора в этом проекте(тк в Джанга она предустановлена), но авторизоваться в ней можно только создав суперпользователя
# > docker-compose run django pyton manage.py migrate          - команда migrate выполнит миграции (создаст таблицы по умолчанию)
# > docker-compose run django pyton manage.py createsuperuser  - команда createsuperuser запускает создание суперпользователя
# Далее во время создания запрашивает создание логина, имэйла(не обязательно), пароля и его подтверждения(ввод не виден)














#
