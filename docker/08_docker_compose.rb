puts '                                            Docker Compose'

# Docker Compose - это надстройка над Докером, нужна для того чтобы запустить множество приложений (многоконтейнерные Docker-приложения). Позволяет поместить в отдельный фаил все инструкции, что мы прописываем отдельными командами, настройки, образы, порты и потом просто запустить все одной командой.

# Docker Compose позволяет подключить к проету сразу множество образов, указывать связь между ними и добавлять к ним характеристики и настройки. Например, можно подключить языки Джава, Python, C++, PHP и к ним дополнительно настроить сервера, среды разработки и все это в одном файле.

# docker-compose.yml - файл, в котором можно указать описание образов которые будут подключены, какие у них будут характеристики, возможности итд. При запуске проэкта эти образы будут либо скачаны либо сразу запущены.

# В Докер Хабе на странице образа внизу есть описание для фаила docker-compose.yml его содержание можно просто скопировать в свой фаил docker-compose.yml. Так же там ниже есть список всех переменных которые можно дописать дополнительно(например изменение логина, хоста итд)

# При построении файла Compose нужно указать сервисы(выполняют роль образов) и их характеристики. Каждый сервис имеет свой контейнер и все эти контейнеры имеют друг в друга доступ


# $ docker compose version                 => Docker Compose version vN.N.N


# docker-compose.yml   - пример где описано 2 сервиса: 1й с образом СУБД mariadb:10.3 и 2й с образом графического интерфейса phpmyadmin



puts '                                       Сборка и использование образа'

# > docker-compose build       - сборка проекта из всех сервисов описанных в фаиле docker-compose.yml


# docker-compose up - команда запуска собранного проекта, тоесть запуск всех сервисов(созднных для них контейнеров) по инструкции из docker-compose.yml. (?? мб это всетаки в build ??)Предварительно скачаетвание и установит те образы которых нет в наличии. Далее можем выполнить "docker ps" и посмотреть какие контейнеры были созданы и запустились.
# --build   - флаг команды up чтобы пересобрать образы перед тем, как запустить их. Полезно, если внесли изменения в код приложения или Dockerfile (удобно использовать вместо 2х команд build и up)
# > docker-compose up             - запуск контейеров всех сервисов (Ctrl + C выход из режима работы приложения в консоли)
# $ docker-compose up -d          - запуск контейнеров всех сервисов в фоновом режиме
# $ docker-compose up --build     - запуск всех сервисов, с пересборкой образов контейнеров перед запуском

# $ docker-compose -f docker-compose.prod.yml up --build    - собрать и запустить на основе конкретного docker-compose фаила


# > docker-compose down        - остановить все контейнеры запущенные сервисами (останавливаем наш проект)



puts '                        Модификация сервиса и добавление нового сервиса в docker-compose.yml'

# (Тут изменения будут docker-compose(mod).yml льносительно старого docker-compose.yml)

# 1. Модифицируем сервис:
# Можно в этом сервисе поменять образ mariadb:10.3 на образ mysql вместо копирования из хаба кода для mysql (тк там вместо phpmyadmin указан другой графический интерфейс) для этого просто заменим имя образа в разделе image: в docker-compose. Так же можно поменять и другие данные, например пароль на MYSQL_ROOT_PASSWORD: 12345 или добавить новые параметры
# Но стоит обратить внимание на наличие в коде хаба команд "comand"(аналог CMD из докерфаила) и добавить ее(тк она исполняется при каждом запуске)

# 2. Добавление нового сервиса:
# Можно написать код для нового сервиса вручную, скопировать с докерхаб, а можно собрать образ для него по отдельному Dockerfile (тут наш докерфаил с php)

# 3. Собираем и запускаем:
# > docker-compose build
# > docker-compose up
# Заходим на наш локалхост уже в 2х вкладках в разных портах для разных сервисов и получаем новый вариант сборки



puts '                            Описание томов в docker-compose. docker-compose run'

# Можно указать в docker-compose файле и настройки томов, тоесть какие данные и где будут сохраняться. Тоесть указать папку в проекте и папку на хост-машине.


# Создание контейнера Питон + Джанга с сохранением настроек в томах докер:

# 1. Dockerfile(Python+Django) (код там):
# COPY requirements.txt ./               - помещаем фаил requirements.txt(стандартный фаил содержащий библиотеки/зависимости тут библиотеку Джанго) в ./ рабочую директорию, тк мы ее уже установили в WORKDIR, иначе нужно былоб прописать полный путь /usr/src/app
# RUN pip install -r requirements.txt    - берем библиотеки из фаила requirements.txt и устанавливаем их (pip бандлер Питона)

# 2 docker-compose.yml  - код описан в files/docker-compose(volumes).yml

# 3. Запускаем:
# docker-compose run  - команда строит контейнер(docker-compose build), запускает все сервисы(как docker-compose up) и принимает дополнительные подкоманды к функционалу контейнера (? по пути рабочей директории ?), с помощью нее можно обращаться к функционалу контейнера, например выполнять миграции, запускать сервер итд, тоесть все что мы вводим в командную строку к проекту идет через (следует за) "docker-compose run"
# > docker-compose run django django-admin startproject itproger .
# django - обращаемся к контейнеру django описанному в сервисе django в docker-compose
# django-admin startproject itproger .   - Создание нового проекта Джанго в текущн директоии. обращаемся к команде Джанго django-admin, а через нее к команде Джанго startproject которая создает новый Джанго-проект так же указываем название проекта(тут itproger), далее путь (.  - путь, тк тут генерировать Джанго-проект будем в той же папке)
# В итоге создаются фаилы manage.py и папка проекта(тут itproger) с фаилами для работы с Джанга
# > docker-compose up     - все равно необходимо чтобы запустить контейнеры на постоянную обработку(тоесть например запустить сервер)

# 4. Заходим на указанный нами localhost:8000 и получаем стандартную стартовую страницу Джанга
# > docker-compose run django pyton manage.py migrate          - команда migrate выполнит миграции (создаст таблицы по умолчанию)
# > docker-compose run django pyton manage.py createsuperuser  - команда createsuperuser запускает создание суперпользователя



puts '                                 Множество разых docker-compose и Dockerfile'

# В одной директории можно разместить несколько Dockerfile и docker-compose.yml файлов, различая их по именам. Это позволит использовать разные конфигурации, например для разработки и продакшен-окружения

# Dockerfile.dev  - например для разработки
# Dockerfile.prod - например для продакшена

# docker-compose.dev.yml  - для разработки будет использовать Dockerfile.dev через dockerfile: Dockerfile.dev
# docker-compose.prod.yml - для продакшена будет использовать Dockerfile.prod

# $ docker-compose -f docker-compose.dev.yml up --build          - для запуска для разработки
# $ docker-compose -f docker-compose.prod.yml up --build         - для запуска для продакшена

# Дополнительные рекомендации:
# 1. Если у вас есть общие конфигурации для обоих окружений (например, общие директивы для `docker-compose.yml`), вы можете создать один общий файл и использовать его как базу для других с помощью директивы `extends` (если используете более старую версию Compose) или использовать YAML-алиасы.
# 2. Секреты и переменные окружения: для продакшена лучше использовать `.env` файлы для хранения конфиденциальной информации и переменных окружения.
# 3. Сборка образов: Убедитесь, что ваша сборка образов для продакшена оптимизирована (например, используйте многослойные сборки, если это возможно)














#
