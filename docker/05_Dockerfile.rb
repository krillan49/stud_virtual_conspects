puts '                                             Dockerfile'

# Dockerfile (можно без расширений) - фаил позволяет помещать описание подключаемых образов в отдельный файл, который уже потом можно исполнить, чтобы не прописывать каждый раз команды в терминале

# Уже готовый вариант кода для этого фаила есть на странице соответсвующего образа в Docker Hub



puts '                                     Содерание и команды Dockerfile'

# Пример содержания Dockerfile для openjdk и PHP есть в /files

# Dockerfile состоит из нескольких основных команд:

# 1. FROM – указывает какой образ будет использован/скачен (например openjdk). Можно дополнительно указать версию образа (например :11), по умолчанию будет последняя версия. Можно после версии указать еще и сервер(например -apache)
# FROM php:7.2-apache                  - тоесть образ php версии 7.2, сервер apache

# 2. COPY – указывает какие файлы (по их местоположению) из вашего проекта будут скопированы на хост машину. Тоесть, указывает какие файлы будут выполнены за счет возможностей образа. Так мы еще связываем папку и фаилы с образом
# COPY .	/usr/src/myapp               - тут "." путь где(тут в текущей диретории) будут находиться все фаилы, а "/usr/src/myapp" указывает в какую папку в самом образе мы будем это помещать
# COPY . /var/www/html                 - либо можно указать адрес сервера

# 3. WORKDIR – указывает рабочую директорию
# WORKDIR /usr/src/myapp
# WORKDIR /var/www/html

# 4. EXPOSE – указывает порт для проекта. Будет работать в том случае, если в образе есть локальный сервер(локалхост)
# EXPOSE 80
# EXPOSE 8001

# 5. RUN – описывает команду, что выполнится один раз при сборке всего контейнера/создании образа
# RUN	javac Main.java                  - запускаем(javac) и компилируем фаил Main.java

# 6. CMD – описывает команду, что выполняется каждый раз при запуске контейнера
# CMD ["java", "Main"]                 - указываем что будем запускать наш фаил (например Main.java). Наш фаил с необходимым кодом, неоходимо предварительно создать.



puts '                                      Сборка и использование образа'

# Далее для построения фаила прописываем команды в терминале:

# build - команда позволяет построить наш фаил, далее прописываем путь к созданному Dockerfile
# > docker build ./php
# > docker build -t my-php-app ./php         - при помощи флага "-t" задаем название образа(my-php-app). Нельзя чтоб название образа содержало спец символы и символы в верхнем регистре
# Теперь если выполнить 'docker images' мы увидим новый созданный образ в списке, у которого есть айди и размер который совпадает с материнским образом(например openjdk) тк информаци кроме небольшего фаила мы не добавили

# Удаление образа:
# > docker image rm 5ecde7c66384               - по айди образа

# Запуск образа:
# > docker run -p 0a51b7d194e0                 - запуск по айди(можно по названию если его задал при создании)
# > docker run -p 8001:80 -d my-php-app        - запуск по имени с указанием портов
# -p - опция указывающая соединение портов, (8001:80) можно дополнительно указать какие порты соединяются если они разные(будет работать только если у материнского образа есть сервер, в openjdk например нет)
# Порт который работает на нашем компе(1й пр 3001) можно указывать каким угодно. А связываться мы будем с портом который прописали в строке EXPOSE
# В итоге наша проограмма исполняется (пр #=> "Hello World"). Соотв тут мы запустили язык Джава на компьютере на котором он не установлен. Теперь можно перейти на localhost:8001 в браузере и обнаружить там результат заботы программы (Hello)
















#
