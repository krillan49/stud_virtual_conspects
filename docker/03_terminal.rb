puts '                                         Информационные команды'

# > docker                                - выдаст список всех возможных команд Докера

# > docker run --help                     - флаг --help выдаст полную информацию о конкретной команде (тут run) и ее флагах


# > docker info                           - посмотреть всю информацию: какие контейнеры запущены, какие скачаны, какие остановлены, какие на паузе, какие есть образы


# > doсker images                         - детальная информация обо всех скачанных/созданных образах

# > docker ps                             - список всех наших(доступных) контейнеров с их именами, айдишниками, образами которые в них используются, запущен ли(STATUS), порты
# > docker ps -a                          - (all) полный список всех наших(доступных) контейнеров



puts '                                                  run'

# run   - команда создает и запускает контейнер от образа, если данного образа нет, то сначала его скачивает (тоесть включает в себя аналог команды pull). Выдаст сообщение если скачивает образ; или ничего не выдаст и просто запустит, если такой образ уже существует. Автоматически создает контейнер(тк запускаются именно контенеры, а не образы). По умолчанию будет каждый раз создавать новый контейнер с рандомным названием при запуске от образа, так что лучше задать название и потом запускать уже от контейнера через "start". Контейнер будет в режме running.

# Фаги относятся к той коменде за которой непосредственно прописаны:
# --name               - флаг для команды "run" при помощи которого можно задать имя контейнеру. После этого мудобнее будет запускать уже сразу запускать этот контейнер/проект, например "docker start MyJava"
# -d (--detached)      - отсоединенный режим: мы возвращаем управление в наш терминал, а не оставляем его внутри контейнера, тоесть контейнер бует работать в фоновом режиме
# -p (--publish list)  - опция позволяющая соединить порты, можно дополнительно указать какие порты соединяются если они разные например 8001:80 (будет работать только если у материнского образа есть сервер, в openjdk например нет)
# -m (--memory bytes)  - опция позволяет задать лимит выделяемой памяти для данного проекта

# > docker run openjdk                             - запустить (и скачать если его нет) образ "openjdk" без дополнительных опций
# > docker run --name MyJava openjdk               - запускаем образ и создаем на его основе контейнер с именем MyJava
# > docker run -p openjdk                          - запуск по айди (? с портами по умолчанию тк указан флаг  ?)
# > docker run -d -p 80:80 docker/getting-started  - запускаем образ docker/getting-started и устанвливаем для него связанные порты 80:80 (? это значение по умолчанию ?). 1й 80 это порт связанный с нашим компом, 2й 80 это порт самого проекта. Те мы связываем по порту 80 наш комп с портом 80 контейнера/проекта



puts '                                         Интерактивный режим'

# Интерактивный режим - контейнер перейдет в режим running и в терминале мы будем уже внутри контейнера. Например сможем писать код на языке Джава в джавашелл, если образ openjdk, или если образ Убунту, то попали бы в ее баш шелл

# Флаги интерактивного режима, нжно прописать оба чтобы получить возможность взаимодействия с контейнером через терминал:
# -i (--interactive)  - поток STDIN поддерживается в открытом состоянии даже если контейнер к STDIN не подключён.
# -t (--tty)          - выделяется псевдотерминал, который соединяет используемый терминал с потоками STDIN и STDOUT контейнера.

# > docker run -it --name MyJava openjdk       - запустить образ(тут openjdk) в интерактивном режиме.

# Ctrl + d    - выход из интерактивного режима(из работы контейнера) в консоли. Контейнер снова переходит в режим Exited



puts '                                     Команды для работы с образами'

# Удаление образа:
# > docker image rm 5ecde7c66384               - по айди образа



puts '                                   Команды для работы с контейнерами'

# Для команд по работе с существующими контейнерами можно использовать id или название контейнера(если оно есть)

# id контейнера можно найти при помощи "docker ps" либо в приложении Docker Desktop Containers

# start - команда запускает контейнер (? если контейнер пустой и в нем только образ просто вернет имя контейнера и перейдет в режим Running ?)
# > docker start 9cc6a7919e96             - по айди контейнера
# > docker start -i MyJava                - по названию с опцией -i для работы в терминале

# pause - команда поставиь работу контейнера на паузу (?? в отличие от остановки сохранятся временные фаилы ??)
# > docker pause 9cc6a7919e96             - по айди контейнера

# unpause - команда возобновит работу контейнера убрав с паузы
# > docker unpause 9cc6a7919e96           - по айди контейнера

# restart - команда перезапустит работу контейнера (например если возникла проблема)
# > docker restart 9cc6a7919e96           - по айди контейнера

# stop - команда чтобы остановить работу одного или нескольких контейнеров. (уже не откроются в браузере)
# > docker stop 9cc6a7919e96              - по айди контейнера (статус изменится с running на exited)

# kill - команда зкстренного выхода (выход с ошибкой - exited будет равно уже не 0, а какому-то коду ошибки)
# > docker kill MyJava                    - по имени контейнера














#
