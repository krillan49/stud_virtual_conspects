puts '                                         Информационные команды'

# > docker                                - выдаст список всех возможных команд Докера

# > docker run --help                     - флаг --help выдаст полную информацию о конкретной команде (тут run) и ее флагах


# > docker info                           - посмотреть всю информацию: какие контейнеры запущены, какие скачаны, какие остановлены, какие на паузе, какие есть образы


# > doсker images                         - детальная информация обо всех скачанных/созданных образах

# > docker ps                             - список всех наших(доступных) контейнеров с их именами, айдишниками, образами которые в них используются, запущен ли(STATUS), порты
# > docker ps -a                          - (all) полный список всех наших(доступных) контейнеров



puts '                                      Команды для работы с образми'

# > docker run openjdk           - запустить (и скачать если его нет ?) образ без дополнительных опций. Автоматически создает контейнер(тк запускаются именно контенеры а не образы) если его нет(Название контейнеру присваивается случайное). Будет каждый раз создавать новый контейнер при запуске от образа, так что лучше задать название и потом запускать уже от контейнера через start

# > docker run --name MyJava openjdk
# --name - флаг при помощи которого можно задать имя контейнеру(тут MyJava)

# Когда контейнер создан уже не нужно запускать образ можно сразу запускать наш контейнер/проект:
# > docker start MyJava                    - запускаем при помощи команды start контейнер с именем MyJava(если контейнер пустой и в нем только образ просто вернет имя контейнера и перейдет в режим Running)
# Далее мы можем остановить работу контейнера(docker stop MyJava) поставить на паузу снять с паузы итд аналогичным образом


# > docker run -it --name MyJava openjdk       - запустить образ(тут openjdk) в интерактивном режиме.
# Интерактивный режим - контейнер перейдет в режим running и в терминале мы будем уже внутри контейнера (в данном случае сможем писать код на языке Джава в джавашелл, еслиб был например образ Убунту, то попали бы в ее баш шелл). ?? Нахрен нужен этот интерактивный режим ??
# -i (--interactive). Благодаря этому флагу поток STDIN поддерживается в открытом состоянии даже если контейнер к STDIN не подключён.
# -t (--tty). Благодаря этому флагу выделяется псевдотерминал, который соединяет используемый терминал с потоками STDIN и STDOUT контейнера.
# Для того чтобы получить возможность взаимодействия с контейнером через терминал нужно совместно использовать флаги -i и -t.
# Ctrl + d - выход из интерактивного режима(из работы контейнера) в консоли. Контейнер снова переходит в режим Exited



puts '                                    Команды для работы с контейнерами'

# Для команд по работе с существующими контейнерами можно использовать id или название контейнера(если оно есть)

# id контейнера можно найти при помощи "docker ps" либо в приложении Docker Desktop Containers

# start - команда запускает контейнер
# > docker start 9cc6a7919e96             - по айди контейнера
# > docker start -i MyJava                - по названию с опцией -i для работы в терминале

# pause - команда поставиь работу контейнера на паузу (?? в отличие от остановки сохранятся временные фаилы ??)
# > docker pause 9cc6a7919e96             - по айди контейнера

# unpause - команда возобновит работу контейнера убрав с паузы
# > docker unpause 9cc6a7919e96           - по айди контейнера

# restart - команда перезапустит работу контейнера (например если возникла проблема)
# > docker restart 9cc6a7919e96           - по айди контейнера

# stop - команда чтобы остановить работу одного или нескольких контейнеров. (уже не откроются в браузере)
# > docker stop 9cc6a7919e96              - по айди контейнера (статус изменится с running на exited)

# kill - команда зкстренного выхода (выход с ошибкой - exited будет равно уже не 0, а какому-то коду ошибки)
# > docker kill MyJava                    - по имени контейнера



puts '                                            Описание команды (? перенести к обазам ?)'

# На примере тестовой командв со стратового экрана Docker desctop (там приложение с сайтом), что значат строки из набора команд в терминале:

# > docker run -d -p 80:80 docker/getting-started

# 1. docker - команда обращения к докеру(будем через докер что-то выполнять)

# 2. run    - команда запускает контейнер, если данного контейнера нет, то сначала его скачивает, выдаст сообщение если скачивает или ничего и просто запустит, если контейнер уже существует. Контейнер будет в режме running
#    pull   - (может стоять на месте run) команда только скивает контейнер.

# 3. Опции относятся к той команде после которой стоят, например тут опция -d относится к команде run
#    -d (--detached)     - отсоединенный режим: мы возвращаем управление в наш терминал, а не оставляем его внутри контейнера, тоесть работа в фоновом режиме
#    -p (--publish list) - опция позволяющая соединить порты
#    -m (--memory bytes) - опция позволяет задать лимит выделяемой памяти для данного проекта

# 4. 80:80 - связываем порты. 1й 80 это порт связанный с нашим компом, 2й 80 это порт самого проекта. Те мы связываем по порту 80 наш комп с портом 80 контейнера/проекта

# 5. docker/getting-started - название контейнера, который мы хотим скачать и/или запустить/установить
















#
