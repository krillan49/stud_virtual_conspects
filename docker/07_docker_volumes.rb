puts '                                        Монтирование общей папки'

# Монтирование общей папки для хост машины и контейнера - позволяет извне контейнера добавлять(хранить) в приложение в контейнере временные данные. Это устаревший способ и предпочтительнее использовать Docker Volumes

# -v    - флаг команды run соединить папку на нашем коипьютере(хост машина) с папкой в контейнере. Пути нужно указывать абсолютными. Название папок должно быть одинаковым, пути записываются через двоеточие, первим путь к папке на нашем ПК и вторым путь к папке в контейнере

# $ docker run -v /user/some/app/resourses:/usr/src/app/resourses openjdk    - создаем контейнер с общей папкой resourses, которая находится на хот машине по пути /user/some/app/resourses а в контейнере по пути /usr/src/app/resourses



puts '                                             Docker Volumes'

# По умолчанию, когда мы запускаем контейнер и делаем в нем какие-то настройки, добавляем данные в БД итд, а потом перезапускаем - то все эти изменения не сохраняются

# Docker Volumes / Докер Тома – позволяют сохранять значения внутри контейнеров даже после их перезапуска. Сохраняет настройки на сервере(хост машине). За счет томов можно хранить значения в БД, файлы, документы итд.

# По сути Docker Volumes это надстройка над теми же папками (?? смонтированными общими ??). Сам Docker Volumes представляет собой папку, просто она хранится по определенному пути. Тоесть данные хранятся не в контейнере а в Volume и соответсвенно при перезапуске контейнера он опять получит к ним доступ. Удобно хранить там например БД


# $ docker volume ls                - посмотреть какие тома у нас доступны

# $ docker volume create web        - создать тома с именем "web"

# Для подключения Docker Volume так же используем флаг -v и передаем в него название созданныого тома и через двоеточие абсолютный путь каталога внутри контейнера
# $ docker run --name MyJava -v web:/usr/src/app/resourses openjdk    - создаем контейнер с подключенным томом "web" к папке контейнера "/usr/src/app/resourses"



puts '                              Создание контейнера с сохранением настроек в томах(?? перенести в компосе ??)'

# Для того чтобы тома работали нужно указать в docker-compose файле какие данные и где будут сохраняться. Обычно нужно указать папку в проекте и папку на хост-машине.


# Создание контейнера Питон + Джанга с сохранением настроек в томах докер:

# 0. requirements.txt  - стандартный фаил содержащий библиотеки(зависимости) для проэктов Джанга. Записываем в этот фаил:
# Django>=3.0,<4.0                                        - библиотека Джанга выше версии 3.0 и ниже версии 4.0
# psycopg2-binary>=2.8                                    - дополнительная библиотека для работы с Джанга и Питоном

# 1. Dockerfile(Python+Django) (код там):
# COPY requirements.txt ./                - requirements.txt помещаем этот фаил в ./ рабочую директорию WORKDIR, так же можно былоб и прописать полный тут /usr/src/app, что тоже самое, тк мы его уже установили в WORKDIR(можно писать другой путь)
# RUN pip install -r requirements.txt     - берем библиотеки из фаила requirements.txt и устанавливаем при создании образа

# 2 docker-compose.yml  - код описан в files/docker-compose(volumes).yml

# 3. Запускаем:
# docker-compose run  - команда строит контейнер(docker-compose build), запускает все сервисы(как docker-compose up) и принимает дополнительные подкоманды к функционалу контейнера (? по пути рабочей директории ?), с помощью нее можно обращаться к функционалу контейнера, например выполнять миграции, запускать сервер итд, тоесть все что мы вводим в командную строку к проекту идет через (следует за) "docker-compose run"
# (??? docker compose up -d    новая актуальная версия этой команды ???)
# > docker-compose run django django-admin startproject itproger .
# django django-admin startproject itproger .   - Создание нового проекта Джанго в текущн директоии. django - обращаемся к уже собранному фрэймворку Джанго, а через него к команде Джанго django-admin, а через нее к команде Джанго startproject которая создает новый Джанго-проект так же указываем название проекта(тут itproger), далее путь (.  - путь, тк тут генерировать Джанго-проект будем в той же папке)
# В итоге создаются фаилы manage.py и папка проекта(тут itproger) с фаилами для работы с Джанга
# > docker-compose up     - все равно необходимо чтобы запустить контейнеры на постоянную обработку(тоесть например запустить сервер)

# 4. Заходим на указанный нами localhost:8000 и получаем стандартную стартовую страницу Джанга
# если не работает смотрим в файл settigs.py строку ALLOWED_HOSTS = [] (тут должно быть [] или ['*'] это значит, что разрешенные хосты стоят в значении "все")
# localhost:8000/admin - панель администратора в этом проекте(тк в Джанга она предустановлена), но авторизоваться в ней можно только создав суперпользователя
# > docker-compose run django pyton manage.py migrate          - команда migrate выполнит миграции (создаст таблицы по умолчанию)
# > docker-compose run django pyton manage.py createsuperuser  - команда createsuperuser запускает создание суперпользователя
# Далее во время создания запрашивает создание логина, имэйла(не обязательно), пароля и его подтверждения(ввод не виден)














#
