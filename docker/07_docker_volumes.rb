puts '                                       Docker Volumes/Тома докер'

# Docker Volumes/Докер Тома – позволяют сохранять значения внутри контейнеров даже после их перезапуска. Сохраняет настройки на сервере(хост машине). Тк без них когда мы запускаем контейнер и делаем в нем какие-то настройки, а потом перезапускаем - то все эти настройки по умолчанию не сохраняются.

# За счет томов можно хранить как значения из базы данных, так и всевозможные файлы, документы и прочее.
# Нужно указывать в docker compose файле какие данные и где будут сохраняться. Обычно вы указываете папку в вашем проекте и папку на хост-машине.


# ПРИМЕР(Создание контейнера Питон + Джанга с сохранением настроек в томах докер):

# 1. Dockerfile:
# FROM python:3
# WORKDIR /usr/src/app                    - рабочая директория на хостмашине
# COPY requirements.txt ./                - requirements.txt стандартный фаил содержащий библиотеки(зависимости) для проэктов Джанга. ./ помещаем этот фаил в раб директорию WORKDIR(можно писать другой путь)
# RUN pip install -r requirements.txt     - берем библиотеки из фаила requirements.txt и устанавливаем при создании образа

# 2 docker-compose.yml  - код описан в docker/docker-compose.yml

# 3. requirements.txt  - записываем в этот фаил:
# Django>=3.0,<4.0                                        - библиотека Джанга выше версии 3.0 и ниже версии 4.0
# psycopg2-binary>=2.8                                    - дополнительная библиотека для работы с Джанга и Питоном
# С новой строки можно дописать другие библиотеки если они нужны

# 4. Далее запускаем все это:
# > docker-compose run django django-admin startproject itproger .
# docker-compose run - не только запускает все сервисы(как docker-compose up) и строит контейнер(docker-compose build) но и позволяет дописывать дополнительные команды
# django - обращаемся к уже собранному джанго а через него к команде джанго django-admin а через нее к другой команде
# startproject которая создает новый проект так же указываем название проекта(тут itproger).
# Далее путь(тут . значит устанавливать проект будем в той же папке)
# в итоге создаются фаилы manage.py и папка проекта(тут itproger) с фаилами для работы с Джанга
# > docker-compose up                   - все равно необходимо чтобы запустить контейнеры на постоянную обработку

# 5. теперь заходим на указанный нами localhost:8000 и получаем стандартную стартовую страницу Джанга
# если не работает смотрим в файл settigs.py строку ALLOWED_HOSTS = [] (тут должно быть [] или ['*'] это значит что разрешенные хосты стоят в значении "все")
# localhost:8000/admin - панель администратора в этом проекте(тк в Джанга она предустановлена), но авторизоваться в ней можно только создав суперпользователя
# > docker-compose run django  pyton manage.py migrate          - migrate - команда позволяет выполнить миграцию фаилов для создания суперпользователя
# > docker-compose run django  pyton manage.py createsuperuser  - createsuperuser - команда запускает создание суперпользователя
# Далее во время создания запрашивает создание логина, имэйла(не обязательно), пароля и его подтверждения(ввод не виден)
# теперь вводя логин и пароль мы можем авторизоваться в панели администратора и войти в нее.
# НО если мы выйдем и остановим контейнер(docker-compose down) то все эти настройки(суперпользователь, миграции) исчезнут, чтобы этого не случилось нужно прописать volumes и для pgdb(сделано)














#
