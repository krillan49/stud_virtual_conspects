puts '                                           Терминал - команды'

# > docker                                - выдаст список всех возможных команд

# > docker run --help                     - флаг --help выдаст полную информацию о конкретной команде

# > docker info                           - посмотреть всю информацию о нашем докере(какие контейнеры используются, какие скачаны, какие остановлены, какие есть образы)

# > doсker images                         - более детальная информация обо всех образах(та же таблица что и в приложении)

# > docker ps                             - показать полный список всех наших(доступных) контейнеров
# > docker ps -a                          - показать полный список всех наших(доступных) контейнеров

# stop - команда чтобы остановить работу одного или нескольких контейнеров. (уже не откроются в браузере)
# > docker stop 9cc6a7919e96              - по айди контейнера(который можно найти при помощи docker ps либо в приложении Docker Desktop Containers(статус изменится с running на exited)

# start - команда чтобы запустить контейнер
# > docker start 9cc6a7919e96             - по айди
# > docker start -i xxx                   - по названию с опцией для работы в терминале

# pause - команда чтобы поставить работу контейнера на паузу
# > docker pause 9cc6a7919e96             - по айди

# unpause - команда чтобы возобновить работу контейнера убрав с паузы
# > docker unpause 9cc6a7919e96           - по айди

# restart - команда чтобы перезапустить работу контейнера если вдруг возникла проблема
# > docker restart 9cc6a7919e96           - по айди


# > docker run -it openjdk                - запустить образ(тут openjdk) в интерактивном режиме. В этом режиме контейнер перейдет в режим running и в терминале мы будем уже внутри контейнера и в данном случае сможем писать код на языке Джава. При каждом новом запуске образа из консоли создается и запускается новый контейнер(хотя в приложении ничего и не меняется)
# -i (--interactive). Благодаря этому флагу поток STDIN поддерживается в открытом состоянии даже если контейнер к STDIN не подключён.
# -t (--tty). Благодаря этому флагу выделяется псевдотерминал, который соединяет используемый терминал с потоками STDIN и STDOUT контейнера.
# Для того чтобы получить возможность взаимодействия с контейнером через терминал нужно совместно использовать флаги -i и -t.

# > docker run -it --name MyJava openjdk
# --name - флаг при помощи которого можно задать имя контейнеру(тут MyJava)

# Ctrl + d - выход из интерактивного режима(из работы контейнера) в консоли. Контейнер снова переходит в режим Exited

# Когда контейнер создан уже не нужно запускать образ можно сразу запускать наш контейнер/проект:
# > docker start MyJava                    - запускаем при помощи команды start контейнер с именем MyJava(если контейнер пустой и в нем только образ просто вернет имя контейнера и перейдет в режим Running)
# Далее мы можем остановить работу контейнера(docker stop MyJava) поставить на паузу снять с паузы итд аналогичным образом

# > docker kill MyJava                     - зкстренный выход(выход с ошибкой - exited будет равно уже не 0)



puts '                                              Терминал'

# Что значат строки из набора команд в терминале(на примере):
# > docker run -d -p 80:80 docker/getting-started

# 1. docker - команда обращения к докеру(будем через докер что-то выполнять)

# 2. run - команда говорит что мы запускаем некий контейнер/проект. Если данного контейнера нет - команда так же его докачивает, а потом запускает
#    pull - (может стоять на месте run)команда говорящая о том что нам надо скачать некий контейнер.

# 3. Опции относятся к той команде после которой стоят, например тут опция -d относится к команде run
#    -d (--detached)     - опция команды run - отсоединенный режим: мы возвращаем управление в наш терминал, а не оставляем его внутри контейнера.(работа в фоновом режиме)
#    -p (--publish list) - опция позволяющая соединить порты
#    -m (--memory bytes) - Memory limit опция позволяет задать лимит выделяемой памяти для данного проекта

# 4. 80:80 - связываем порты. 1й 80 это порт связанный с нашим компом, 2й 80 это порт самого проекта. Те мы связываем по порту 80 наш комп с портом 80 контейнера/проекта

# 5. docker/getting-started - название контейнера, который мы хотим скачать и/или запустить/установить

# Далее пошла проверка на наличие(будет сообщение если проет отсутствуует), затем его скачивание и запуск(тк была прописана команда run). Теперь в нашем приложении Docker Desktop появился контейнер
















#
