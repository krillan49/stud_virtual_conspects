puts '                                              Docker'

# https://www.docker.com/

# Докер - это средство виртуализации, но не для создания полновесной операционной системы, а виртуализации на уровне отдельного приложения. Так что если не нужна полноценная система, а только одно приложение, то Докер лучше, тк запускается намного быстрее, к тому же если нужны отдельные виртувлизации то много виртуальных машин займут слишком много ресурсов компьютера, тк на каждой полноценная ОС, Докер же потребует в разы меньше. Плюс Докер предоставляет единый универсальный функционал для управления этими виртуализацими (контейнерами), что облгчает работу со множеством виртуализаций.

# Тоесть Докер - это срество упаковки, дотавки и запуска приложений

# Можно поместить проект(на любом языке) в контейнер, к проекту добавить всё необходимое окружение: среду выполнения, сервер, различные пакеты, приложения, базы данных, все необходимые зависимости, настройки и свои доп фаилы (и полноценные ОС еси они вдруг нужны). Далее можно выгрузить проект(контейнер) и после передать его кому угодно

# Если отправить проект без докера, то еще потребуется описать процесс настройки и процесс запуска и клиент все равно может ошибиться. А с Докером  все что нужно клиенту это установить Докер и одной командой запустить наш проект, при этом вся среда будет в самом контейнере, поэтому ничего не потребуется устанавливать или настраивать.

# Если нужно протестировать у себя на ПК работу какой-то технологии, например WordPress, то не нужно устанавливать локальный сервер, на него устанавливать WordPress и все настраивать, можно просто взять готовый контейнер с установленным WordPress и запустить его, а потом уже установить на систему, если зайдет

# Если нужно протестировать что-то на БД, то не нужно будет очищать данные, достаточно просто выключить контейнер с СУБД и включить заново, тк по умолчанию контейнер вернется в изначальное состояние



puts '                                           Основные понятия'

# Image(образы) - это пакеты, содержащие готовый функционал(ЯП, технологию, ?готовые проекты? итд). Образы качаются из определенного регистра. Образ нельзя изменять. На основе образа или нескольких образов мы можем создать готовый проект/контейнер

# Образ - это наша сборка, тоесть все технологии которые мы упаковали. Это готовое к запуску приложение, но еще не запущенное. На его основе мы можем создать множество одинаковы контейнеров.

# Образы созданы по типу "слоеного пирога", например можно взять образ Убунту, положить повер образ МонгоБД и в итоге получить образ в котором есть Убунту и МонгоБД. Дадее можно добавить образ с Питоном, образ со сволим собственным приложением и получить из этого образ со всем этим сразу

# Реестр образов (Docker Registry) - наодится локально, там хранятся образы, которые созданы нами.
# Docker Hub - удаленный реестр образов, который поддерживается разработчиками Докера


# Контейнер(приложение) - наш проект состоящий из образов, те содержащий функционал из образов и на основе этого функционала наше приложение, включая и наш код. Тоесть контейнер это упакованное приложение со всеми нужнми для него технологиями, ну или просто куча всяких технологий можно напихать. Этот проект можно запускать и пересылать. Получается готовая закрытая среда, где сразу есть все технологии, код и операционная система, если нужно.

# Контейнер - это работаюее прилоение, которое создано на базе образов


# Для конейнера образ является рид-онли системой и он не может его изменить, тоесть что угодно можно сделать с контейнером, на образ это никак не повлияет



puts '                                               Установка'

# На мак и виндоус просто качать установочник и установить

# https://docs.docker.com/desktop/setup/install/linux/               - инструкция установки на Линукс
# https://docs.docker.com/desktop/setup/install/linux/ubuntu/        - инструкция установки на Убунту



puts '                                     Запуск контейнеров/приложений'

# (?? Только для приложений Вебсайтов)В браузере нужно открыть локалхост и указать используемый порт (например 80) получится например localhost/80 (хотя порт прописывать не обязательно ?если это 80?), либо открыть контейнер из приложения "Docker Desktop Containers Open with browser"

# В итоге мы получаем вебсайт с некой функциональностью находящийся на нашем компьютере и работающий по некоторому порту

# Так же можно скачать образ языка и внутри контейнера будет рабочий язык без наобходимости установки его на нашем компьютере. Так же можно будет передать этот контейнер на другой компьютер



puts '                                              Windows'

# https://docs.docker.com/desktop/windows/                - Руководство пользователя Docker Desktop для Windows

# https://bv-dev.ru/ustanovka-dockerdoke-na-windows-10-reshenie-problem/     -  Решение проблемы с виндоус 10

# Если Docker работает на WSL, можно вернуть оперативную память, завершив все запущенные дистрибутивы с помощью команды:
# > wsl --shutdown


# На ОС без Линукс ядра запускает миллиард инстансов qemu, чтобы сэмулировать подходящее окружение
# На линуксе ничего не будет жрать
# На ОС, где не доступен докер, достаточно просто qemu иметь при себе, где докер, например в альпине можно будет запустить














#
