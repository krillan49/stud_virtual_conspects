puts '                                              Docker'

# https://www.docker.com/

# Докер - это средство виртуализации, но не для создания полновесной операционной системы, а виртуализации на уровне отдельного приложения.

# Если не нужна полноценная система, а только одно приложение, то Докер лучше полноцнной виртуальной машины:
# 1. Докер запускается намного быстрее
# 2. Если нужны отдельные виртувлизации то много виртуальных машин займут слишком много ресурсов компьютера, тк на каждой полноценная ОС, Докер же потребует в разы меньше
# 3. Докер предоставляет единый универсальный функционал для управления этими виртуализацими (контейнерами), что облгчает работу со множеством виртуализаций.


# Докер - это срество упаковки, дотавки и запуска приложений

# Можно поместить проект(на любом языке) в контейнер, к проекту добавить всё необходимое окружение: среду выполнения, сервер, различные пакеты, дополнительные приложения, базы данных, все необходимые зависимости, настройки и свои доп фаилы (и полноценные ОС если они вдруг нужны). Далее можно выгрузить проект(контейнер) и после передать его кому угодно


# Варианты применения Докера:
# 1. Удобно передавать проект кому либо. Если отправить проект без Докера, то еще потребуется для получателя описать процесс настройки и процесс запуска, а если он не шарит, то все равно при этом может где-то накосячить. А с Докером все что нужно получателю - это установить Докер и одной командой запустить проект, при этом вся среда будет в самом контейнере, поэтому ничего не потребуется устанавливать или настраивать.
# 2. Удобно пробовать технологии. Если нужно протестировать у себя на ПК работу какой-то технологии, то не придется устанавливать и настраивать кучу всего, можно просто взять готовый контейнер и запустить его
# 3. Удобно тестировать что-то с БД. Не нужно будет очищать данные, достаточно просто выключить контейнер с СУБД и включить заново, тк по умолчанию контейнер вернется в изначальное состояние



puts '                                           Основные понятия'

# 1. Image (образ) - это пакет, тоесть сборка, содержащая все технологии, которые туда упаковали. Содержат готовый функционал(ЯП, технологии, готовые проекты итд). Это готовое к запуску приложение, но еще не запущенное. На основе образов можно создать сколько угодно одинаковых контейнеров, тоесть работающих приложний

# Образы нельзя изменить, только создавать на их основе другие образы.

# Образы созданы по типу "слоеного пирога", например можно взять образ Убунту, положить поверх образ МонгоБД и в итоге получить образ в котором есть и Убунту и МонгоБД. Далее можно добавить образ с Питоном, образ со своим приложением и получить из этого образ со всем этим сразу

# Образы качаются из определенного регистра
# Реестр образов (Docker Registry) - наодится локально, там хранятся образы, которые созданы нами.
# Docker Hub - удаленный реестр образов, который поддерживается разработчиками Докера


# 2. Контейнер - это готовая закрытая среда, работаюее упакованное приложение, которое создано на базе образов, те содержащий функционал из образов.

# Контейнер работает только до тех пор пока работает приложение. Тоесть если Контейнер только запускает какой-то скрипт, то после его исполнения контейнер выключается.

# Для конейнера образ является рид-онли системой и он не может его изменить, тоесть что угодно можно сделать с контейнером, на образ это никак не повлияет



puts '                                               Установка'

# На мак и виндоус просто качать установочник и установить

# https://docs.docker.com/desktop/setup/install/linux/               - инструкция установки на Линукс
# https://docs.docker.com/desktop/setup/install/linux/ubuntu/        - инструкция установки на Убунту



puts '                                     Запуск контейнеров/приложений'

# (?? Только для приложений Вебсайтов)В браузере нужно открыть локалхост и указать используемый порт (например 80) получится например localhost/80 (хотя порт прописывать не обязательно ?если это 80?), либо открыть контейнер из приложения "Docker Desktop Containers Open with browser"

# В итоге мы получаем вебсайт с некой функциональностью находящийся на нашем компьютере и работающий по некоторому порту

# Так же можно скачать образ языка и внутри контейнера будет рабочий язык без наобходимости установки его на нашем компьютере. Так же можно будет передать этот контейнер на другой компьютер



puts '                                              Windows'

# https://docs.docker.com/desktop/windows/                - Руководство пользователя Docker Desktop для Windows

# https://bv-dev.ru/ustanovka-dockerdoke-na-windows-10-reshenie-problem/     -  Решение проблемы с виндоус 10

# Если Docker работает на WSL, можно вернуть оперативную память, завершив все запущенные дистрибутивы с помощью команды:
# > wsl --shutdown


# На ОС без Линукс ядра запускает миллиард инстансов qemu, чтобы сэмулировать подходящее окружение
# На линуксе ничего не будет жрать
# На ОС, где не доступен докер, достаточно просто qemu иметь при себе, где докер, например в альпине можно будет запустить














#
